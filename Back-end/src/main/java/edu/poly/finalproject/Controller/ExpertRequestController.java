package edu.poly.finalproject.Controller;import edu.poly.finalproject.model.ExpertRequest;import edu.poly.finalproject.model.User;import edu.poly.finalproject.repository.UserRepository;import edu.poly.finalproject.service.ExpertRequestService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.security.Principal;import java.util.List;@RestController@RequestMapping("/ExpertRequest")public class  ExpertRequestController{    @Autowired    private ExpertRequestService expertRequestService;    @Autowired    private UserRepository userRepository;    // endpoint for submitting a new application    @PostMapping("/submit")    public ResponseEntity<ExpertRequest> addExpertRequest(@RequestPart("applicationData") MultipartFile applicationData) {        // Retrieve the currently authenticated user's information        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String currentPrincipalName = authentication.getName();        // Fetch the corresponding User entity from the database        User user = userRepository.findByEmail(currentPrincipalName);        if (user == null) {            throw new IllegalArgumentException("No user found with this email address: " + currentPrincipalName);        }        // Check if user already has an ExpertRequest        ExpertRequest existingRequest = expertRequestService.findByUser(user);        if(existingRequest != null){            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null); // return bad request status (or any other appropriate response)        }        ExpertRequest expertRequest = new ExpertRequest();        try {            // Get the bytes of the uploaded file            byte[] applicationDataBytes = applicationData.getBytes();            // Associate the User with the ExpertRequest            expertRequest.setUser(user);            // Set the application data for the ExpertRequest            expertRequest.setApplicationData(applicationDataBytes);            // Set the status to pending            expertRequest.setStatus("pending");            // Save the ExpertRequest            expertRequestService.saveExpertRequest(expertRequest);        } catch (IOException e) {            throw new RuntimeException("Failed to process the file.", e);        }        return ResponseEntity.ok(expertRequest);    }    // endpoint for getting all applications (for admin)    @GetMapping("/show")    public List<ExpertRequest> getAllExpertRequest() {        return expertRequestService.getExpertRequest();    }    @PutMapping("/update/{id}")    public ExpertRequest updateExpertRequest(@PathVariable Long id, @RequestPart("applicationData") MultipartFile applicationData) {        ExpertRequest existingRequest = expertRequestService.findById(id)                .orElseThrow(() -> new IllegalArgumentException("No ExpertRequest found with this id: "+id));        try {            // Get the bytes of the uploaded file            byte[] applicationDataBytes = applicationData.getBytes();            // Update the application_data of the ExpertRequest            existingRequest.setApplicationData(applicationDataBytes);            existingRequest.setStatus("pending");            // Save the updated ExpertRequest            return expertRequestService.saveExpertRequest(existingRequest);        } catch (IOException e) {            throw new RuntimeException("Failed to read the file bytes.", e);        }    }    @GetMapping("/myExpertRequest")    public ExpertRequest getMyExpertRequest(Principal principal) {        String email = principal.getName();        User user = userRepository.findByEmail(email);        ExpertRequest expertRequest = expertRequestService.findByUser(user);        return expertRequest;    }}